#
# This file is invoked by 'script_test.go' and tests the StateDB script commands 
# defined in 'script.go'.
#

hive start

# Show the registered tables
db

# Initialized
db/initialized
db/initialized test1
db/initialized test1 test2

# Show (empty)
db/show test1
db/show test2

# Assert empty
db/empty test1 test2

# Insert
db/insert test1 obj1.yaml
db/insert test1 obj2.yaml
db/insert test2 obj2.yaml

# Assert not empty
! db/empty test1 test2

# Show (non-empty)
db/show test1
stdout ^ID.*Tags
stdout 1.*bar
stdout 2.*baz
db/show test2

db/show --format=table test1
stdout ^ID.*Tags
stdout 1.*bar
stdout 2.*baz

db/show --format=table --columns=Tags test1
stdout ^Tags$
stdout '^bar, foo$'
stdout '^baz, foo$'

db/show -f table -o test1_show.table test1
cmp test1.table test1_show.table

db/show --format=yaml --out=test1_show.yaml test1
cmp test1.yaml test1_show.yaml

db/show --format=json -o=test1_show.json test1
cmp test1.json test1_show.json

# Get
db/get test2 2
db/get --format=table test2 2
stdout '^ID.*Tags$'
stdout ^2.*baz
db/get --format=table --columns=Tags test2 2
stdout ^Tags$
stdout '^baz, foo$'
db/get --format=json test2 2
db/get --format=yaml test2 2
db/get --format=yaml -o=obj2_get.yaml test2 2
cmp obj2.yaml obj2_get.yaml

db/get -i tags -f yaml -o obj1_get.yaml test1 bar
cmp obj1.yaml obj1_get.yaml

# List
db/list -o=list.table test1 1
cmp obj1.table list.table
db/list -o=list.table test1 2
cmp obj2.table list.table

db/list -o list.table -i tags test1 bar
cmp obj1.table list.table
db/list -o=list.table -i=tags test1 baz
cmp obj2.table list.table
db/list --out=list.table --index=tags test1 foo
cmp objs.table list.table

db/list --format=table --index=tags --columns=Tags test1 foo
stdout ^Tags$
stdout '^bar, foo$'
stdout '^baz, foo$'

# Prefix
# uint64 so can't really prefix search meaningfully, unless
# FromString() accomodates partial keys.
db/prefix test1 1

db/prefix -o=prefix.table --index=tags test1 ba
cmp objs.table prefix.table

# LowerBound
db/lowerbound -o=lb.table test1 0
cmp objs.table lb.table
db/lowerbound -o=lb.table test1 1
cmp objs.table lb.table
db/lowerbound -o=lb.table test1 2
cmp obj2.table lb.table
db/lowerbound -o=lb.table test1 3
cmp empty.table lb.table

# Compare
db/cmp test1 objs.table
db/cmp test1 objs_ids.table
db/cmp --grep=bar test1 obj1.table
db/cmp --grep=baz test1 obj2.table

# Delete
db/delete test1 obj1.yaml
db/cmp test1 obj2.table

db/delete test1 obj2.yaml
db/cmp test1 empty.table

# Delete with get
db/insert test1 obj1.yaml
db/cmp test1 obj1.table
db/get --delete test1 1
db/cmp test1 empty.table

# Delete with prefix
db/insert test1 obj1.yaml
db/insert test1 obj2.yaml
db/cmp test1 objs.table
db/prefix --index=tags --delete test1 fo
db/cmp test1 empty.table

# Delete with lowerbound
db/insert test1 obj1.yaml
db/insert test1 obj2.yaml
db/cmp test1 objs.table
db/lowerbound --index=id --delete test1 2
db/cmp test1 obj1.table

# Tables
db

# ---------------------

-- obj1.yaml --
id: 1
tags:
    - bar
    - foo
-- obj2.yaml --
id: 2
tags:
    - baz
    - foo
-- test1.yaml --
id: 1
tags:
    - bar
    - foo
---
id: 2
tags:
    - baz
    - foo
-- test1.json --
{
  "ID": 1,
  "Tags": [
    "bar",
    "foo"
  ]
}
{
  "ID": 2,
  "Tags": [
    "baz",
    "foo"
  ]
}
-- test1.table --
ID   Tags
1    bar, foo
2    baz, foo
-- objs.table --
ID   Tags
1    bar, foo
2    baz, foo
-- objs_ids.table --
ID
1
2
-- obj1.table --
ID   Tags
1    bar, foo
-- obj2.table --
ID   Tags
2    baz, foo
-- empty.table --
ID   Tags
